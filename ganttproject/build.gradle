buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.io.miret.etienne.gradle:sass-gradle-plugin:1.+"
        classpath 'org.openjfx:javafx-plugin:0.0.12'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm"
    id "maven-publish"
}

apply plugin: 'application'
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'io.miret.etienne.sass'

ext {
    libDir = 'lib/core'
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

configurations {
    exportedLibs
    exported.extendsFrom archives, providedCompile, exportedLibs
}

dependencies {
    providedCompile project(':biz.ganttproject.core')
    providedCompile project(path: ':biz.ganttproject.app.libs', configuration: 'exported')
    providedCompile project(path: ':biz.ganttproject.app.localization')

    api files("lib/core/eclipsito.jar")
    exportedLibs files("lib/core/eclipsito.jar")

    implementation configurations.direct
    implementation configurations.providedCompile
    implementation configurations.exportedLibs

    implementation fileTree(dir: project.ext.libDir, include: ['*.jar'])
    implementation files('src/main/resources/resources')

    implementation group: 'com.h2database', name: 'h2', version: '2.1.+'

    testImplementation group: 'org.easymock', name: 'easymock', version: '4.+'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.+'

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.+'

//    implementation "de.jensd:fontawesomefx-materialicons:2.2.+"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileSass {
    outputDir = project.file("${projectDir}/src/main/resources")
    doLast {
        copy {
            from "${projectDir}/src/main/resources/biz/ganttproject/app/mdfx.css"
            into "${projectDir}/src/main/resources/com/sandec/mdfx/"
        }
    }
}

processResources.dependsOn('compileSass')

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
            include "**/*.css", "**/*.properties"
        }
    }

    main.kotlin.srcDirs += "src/main/java"
    test.kotlin.srcDirs += "src/test/java"
}

task copyPluginFiles(dependsOn: jar) {
    doLast {
        println ">>> Installing $project.name"
        copy {
            into(new File(rootProject.pluginsDir, project.name))
            from(fileTree(".")) {
                include "plugin.xml"
            }
            from(fileTree("src/main/resources")) {
                include "resources/**.ttf"
                include "resources/**.properties"
                include "resources/calendar/**"
                include "resources/fonts/**"
                include "resources/icons/**"
                include "resources/language/**"
                include "resources/xslfo/**"
                include "resources/xslt/**"
            }
        }
        copy {
            into(new File(rootProject.pluginsDir, "${project.name}/lib/"))
            from(jar.outputs.getFiles().getFiles().flatten())
            from(configurations.compileClasspath.minus(configurations.providedCompile)) {
                include "*.jar"
                exclude "eclipsito.jar"
            }
            rename { filename -> filename + ".lib" }
        }
        println "<<< $project.name"
    }
}

task copyEclipsito(type: Copy) {
    into(rootProject.distBinDir)
    from(fileTree("lib/core")) {
        include "eclipsito.jar"
    }
}

task copyPlugin(dependsOn: ['copyPluginFiles', 'copyEclipsito']) {
    doFirst {
        println "Copying $project.name to $rootProject.pluginsDir"
    }
}

mainClassName = "net.sourceforge.ganttproject.AppKt"
application {
    applicationDefaultJvmArgs = project.ext.javaExportOptions
}
test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

addPublishing(project)
publishing {
    publications {
        core(MavenPublication) {
            artifactId = 'ganttproject'
            artifact jar
        }
    }
}
